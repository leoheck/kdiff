#!/bin/bash

show_help()
{
	IFS= read -r -d '' HELP_MESSAGE <<-EOM

	USAGE:

	    kiri [OPTIONS] [KICAD_PROJECT]

	DESCRIPTION:

		Kiri is a proof of concept script to automate the usage of
		plotkicadsch (plotgitsch) and Kicad-Diff (kidiff) in a single easy-to-use tool.

	OPTIONS:

	     -a|--all         Include all commits even if schematics/layout don't have changes
	     -o|--older HASH  Show commits starting from this one
	     -n|--newer HASH  Show commits until this one delimited by this one
	     -t|--last VAL    Show last N commits

	     -l|--no-server   Do not launch webserver/browser at the end
	     -S|--server-only Start webserver but not launch browser
	     -p|--port PORT   Set webserver port. By default it will try to use an available port.

	     -s|--skip-cache  Skip usage of -chache.lib on plotgitsch
	     -u|--layout      Start with Layout view selected
	     -f|--page-frame  Show whole page frame for PCB

	     -d|--output-dir  Change output folder path/name
	     -r|--remove      Remove generated folder before running it
	     -x|--archive     Archive generate files

	     -v|--version     Show version
	     -h|--help        Show help

	     -D|--debug       Extra info
	    -dp|--debug-sch   Show Plotgitsch stdout and stderr
	    -dk|--debug-pcb   Show Kidiff stdout and stderr
	     -y|--dry-run     Run without generate artifacts
	     -V|--verbose     Verbose

	KICAD_PROJECT:

	    KICAD_PROJECT file is optional.
	    If it is missing the GUI file selector will be loaded

	EXAMPLES:

	    # Launch GUI with file selector
	    kiri

	    # Kicad project on the root of the repo
	    kiri board.pro

	    # Nested project (with verbose and starting fresh)
	    kiri nested-project/board.pro -r -V
	EOM

	echo -e "${HELP_MESSAGE}"
}

# Colors
bold=$(printf "\e[1m")
inv=$(printf "\e[7")
red=$(printf "\e[31m")
green=$(printf "\e[32m")
yellow=$(printf "\e[33m")
blue=$(printf "\e[34m")
reset=$(printf "\e[0m")

kidiff_version()
{
	tool_path=$(dirname "$(which kidiff)")

	if [[ -d "${tool_path}/../.git/" ]]; then

		last_commit_hash=$(git --git-dir "${tool_path}/../.git/" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${tool_path}/../.git/" log -1 --format="%at" | xargs -I{} date -d @{} +"%Y/%m/%d %Hh%M")

		echo "${last_commit_hash} ${last_commit_date}"
	else

		if [[ -d "${tool_path}/../../../.git/" ]]; then

			submodule_version=$(git --git-dir "${tool_path}/../../../.git/" submodule | grep -i KiCad-Diff)

			echo "${submodule_version}"
		else

			echo "Unknown"
		fi
	fi
}

kiri_version()
{
	tool_path=$(dirname "$(which kiri)")

	if [[ -d "${tool_path}/../.git/" ]]; then

		last_commit_hash=$(git --git-dir "${tool_path}/../.git/" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${tool_path}/../.git/" log -1 --format="%at" | xargs -I{} date -d @{} +"%Y/%m/%d %Hh%M")

		echo "${last_commit_hash} ${last_commit_date}"
	else
		echo "Unknown"
	fi
}

show_version()
{
	IFS= read -r -d '' VERSION <<-EOM

	    plotgitsch $(plotgitsch --version)
	    kidiff $(kidiff_version)
	    $(basename "${0}") $(kiri_version)
	EOM

	echo -e "$VERSION"
}

ctrl_c()
{
	echo
	echo "** Trapped CTRL-C"
	echo "Cleaning up and leaving"

	# Restore board bkp
	if [[ -f "${kicad_pcb}.bkp" ]]; then
		mv -f "${kicad_pcb}.bkp" "${kicad_pcb}" &> /dev/null
	fi

	# Remove leftovers
	# rm -rf ${OUTPUT_DIR}
	rm -rf sch[12]-*.svg

	exit 1
}

check_tool()
{
	tool=${1}
	exit=${2}

	if ! command -v "${tool}" &> /dev/null; then
		if [[ "${exit}" != "" ]]; then
			echo "${tool} could not be found"
			exit 1
		fi
		return 1
	else
		return 0
	fi
}

# ==============================================
# Redefine functions for making Linux/OSX smooth
# ==============================================

readlink_osx()
{
	target_file="${1}"
	dir_name=$(dirname "${target_file}")

	cd "${dir_name}" || exit
	target_file=$(basename "${target_file}")

	# Iterate down a (possible) chain of symlinks
	while [ -L "${target_file}" ]
	do
		target_file=$(readlink "${target_file}")
		cd "$(dirname "${target_file}")" || exit
		target_file=$(basename "${target_file}")
	done

	# Compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file.
	phys_dir=$(pwd -P)

	result="${phys_dir}/${target_file}"

	echo "${result}"
}

readlink_()
{
	case ${OSTYPE} in
		darwin*)
			readlink_osx "${1}"
			;;
		*)
			readlink -f "${1}"
			;;
	esac
}

tac_()
{
	case ${OSTYPE} in
		darwin*)
			tail -r
		;;
		*)
			tac
		;;
	esac
}

sed()
{
	case ${OSTYPE} in
		darwin*)
			gsed "$@"
			;;
		*)
			command sed "$@"
			;;
	esac
}

find_()
{
	case ${OSTYPE} in
		darwin*)
			gfind "$@"
			;;
		*)
			find "$@"
			;;
	esac
}

# ======================
# ======================

get_pages()
{
	board_name=${1}
	main_schematic=${2}

	# First page is this one
	pages="${board_name}|${board_name}"

	pagenames=$(sed "s/\r$//g" "${main_schematic}" | grep "^F0 " | cut -d" " -f2 | tr "\n" "|" | sed "s/\"//g" | sed "s/|$//g" | tr "|" "\n")
	pagepaths=$(sed "s/\r$//g" "${main_schematic}" | grep "^F1 " | cut -d" " -f2 | tr "\n" "|" | sed "s/\"//g" | sed "s/|$//g" | tr "|" "\n")

	IFS=$'\n'
	n=0
	for pagename in ${pagenames}; do

		n=$((n+1))

		pagename=$(echo "${pagename}" | sed "s/^ //g" | sed "s/ $//g")
		pagepath=$(echo "${pagepaths}" | sed -n ${n}p)
		filename=$(basename "${pagepath}" | sed "s/\.${kicad_sch_extension}//g")

		page="${pagename}|${filename}"
		pages="${pages}\n${page}"

	done

	echo -e "${pages}"
}

insert_commits()
{
	html="${1}"
	commits="${2}"
	commit1_idx="${3}"
	commit2_idx="${4}"
	project="${5}"
	kicad_pcb="${6}"
	sch_files=$(echo "${7}" | sed "s/^[ \t]\+//g" | sed "s/[ \t]$\+//g")

	# GIT COMMITS FORMAT
	#
	# fcd81ef | 2021-01-22 17:21:39 -0300 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 -0300 | Leandro Heck | Initial commit

	n=0

	COMMITS_LIST_HTML=""

	empty_icon='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: rgba(255, 0, 0, 0.5);" data-icon="bx:bx-x" data-inline="false"></span>'

	IFS=$'\n'
	for commit in ${commits}; do

		if [[ "${commit}" != "local" ]]; then

			hash=$(echo "${commit}" | cut -d'|' -f1 | sed "s/^ //g" | sed "s/[ t]\+//g" )
			date=$(echo "${commit}" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed "s/^ //g" )
			user=$(echo "${commit}" | cut -d'|' -f3 | sed "s/^ //g" )
			 msg=$(echo "${commit}" | cut -d'|' -f4 | sed "s/^ //g" )


			# check for changes in ".sch|.kicad_sch" files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s -E "${sch_files// /|}" &> /dev/null; then
				sch_icon='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #A6E22E;" data-icon="carbon:schematics" data-inline="false"></span>'
			else
				sch_icon="${empty_icon}"
			fi

			# check for changes in .kicad_pcb files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s "${kicad_pcb}" &> /dev/null; then
				layout_icon='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #F92672;" data-icon="codicon:circuit-board" data-inline="false"></span>'
			else
				layout_icon="${empty_icon}"
			fi

			# Check for changes in textual files only
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s -vE "${sch_files// /|}${kicad_pcb}" &> /dev/null; then
				text_icon='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #888888;" data-icon="bi:file-earmark-text" data-inline="false"></span>'
			else
				text_icon="${empty_icon}"
			fi

			if [[ "${n}" == "${commit1_idx}" ]] || [[ "${n}" == "${commit2_idx}" ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			IFS= read -r -d '' COMMIT_HTML <<-EOM
			    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
				<label class="text-sm-left list-group-item" style="display: block; width: 480px" for="${hash}">
			      <table style="width:100%">
			        <tr>
			          <td rowspan=2 style="vertical-align: top; width: 1.8em;">
			            <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
			              <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
			            </svg>
			          </td>
			          <td><em class="text-info" style="  line-height: 0.7;">${msg}</em></td>
			        </tr>
			        <tr>
			          <td style="white-space:nowrap; overflow: hidden;"><span class="text-success font-weight-normal">${hash}</span> <span class="text-muted"> | </span> ${sch_icon} ${layout_icon} ${text_icon} <span class="text-muted font-weight-normal"> | ${date} | ${user}</span></td>
			        </tr>
			      </table>
			    </label>
			EOM

		else

			hash="local"
			date="$(date +'%Y-%m-%d')"
			user="${USER}"
			 msg="Local changes"

			sch_icon="${empty_icon}"
			layout_icon="${empty_icon}"
			text_icon="${empty_icon}"

			if [[ "${n}" == "${commit1_idx}" ]] || [[ "${n}" == "${commit2_idx}" ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			IFS= read -r -d '' COMMIT_HTML <<-EOM
			    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
			    <label class="text-sm-left list-group-item" style="display: block; width: 480px" for="${hash}">
			      <table style="width:100%">
			        <tr>
			          <td style="vertical-align: top; width: 1.8em;">
			            <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
			              <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
			            </svg>
			          </td>
			          <td><em class="text-warning" style=" line-height: 0.7;">${msg}</em></td>
			        </tr>
			      </table>
			    </label>
			EOM

		fi

		n=$((n+1))

		COMMITS_LIST_HTML="${COMMITS_LIST_HTML}${COMMIT_HTML}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	COMMITS_LIST_HTML=$(echo ${COMMITS_LIST_HTML} | sed "s/@/-/g")
	echo 's@<!-- FILL_COMMITS_HERE -->@'"${COMMITS_LIST_HTML}"'@g' > .script.sed
	sed -i -f .script.sed "${html}"
	rm -rf .script.sed
}

insert_pages()
{
	html="${1}"
	pages="${2}"

	# FORMAT
	# pagename|pagepath(.sch|.kicad_sch)

	n=0

	PAGES_LIST_HTML=""

	IFS=$'\n'
	for page in ${pages}; do

		page_name=$(echo "${page}" | cut -d'|' -f1 | sed "s/[ \t]\+//g")
		page_filename=$(echo "${page}" | cut -d'|' -f2 | sed "s/[ \t]\+//g" | sed "s/${kicad_sch_extension}//g")

		if [[ "${n}" == "0" ]]; then
			checked='checked="checked"'
		else
			checked=""
		fi

		IFS= read -r -d '' HTML_SNIPPET <<-EOM
		    <input  id="${page_filename}" title="${page_name}" type="radio" value="${page_filename}" name="pages" ${checked} onchange="change_page()"/>
		    <label for="${page_filename}" title="${page_name}" id="label-${page}" class="rounded text-sm-left list-group-item radio-box" onclick="change_page_onclick()" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
		    <span title="${page_name}" style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
			    ${page_name}
		    </label>
		EOM

		n=$((n+1))

		PAGES_LIST_HTML="${PAGES_LIST_HTML}${HTML_SNIPPET}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	PAGES_LIST_HTML=$(echo ${PAGES_LIST_HTML} | sed "s/@/-/g")
	echo 's@<!-- FILL_PAGES_HERE -->@'"${PAGES_LIST_HTML}"'@g' > .script.sed
	sed -i -f .script.sed "${html}"
	rm -rf .script.sed
}

# Fix layer names when using Kicad v6 on old projects (v5)
fix_layer_names()
{
	_layers="$1"

	_layers_new=
	if [[ ${KICAD_VERSION} == 6 ]] && [[ ${PCBS_VERSION} -lt 20211014 ]]; then

		IFS=$'\n'
		for layer in ${_layers}; do
			layer_id=$(echo "${layer}" | cut -d" " -f1)
			layer_name=$(echo "${layer}" | cut -d" " -f2)
			case "${layer_name}" in
				B.Adhes)   new_layer_name="B.Adhesive" ;;
				F.Adhes)   new_layer_name="F.Adhesive" ;;
				Cmts.User) new_layer_name="User.Comments" ;;
				Dwgs.User) new_layer_name="User.Drawings" ;;
				Eco1.User) new_layer_name="User.Eco1" ;;
				Eco2.User) new_layer_name="User.Eco2" ;;
				B.SilkS)   new_layer_name="B.Silkscreen" ;;
				F.SilkS)   new_layer_name="F.Silkscreen" ;;
				B.CrtYd)   new_layer_name="B.Courtyard" ;;
				F.CrtYd)   new_layer_name="F.Courtyard" ;;
				*)         new_layer_name=${layer_name}  ;;
			esac
			if [[ ${_layers_new} == "" ]]; then
				_layers_new="${layer_id} ${new_layer_name}"
			else
				_layers_new="${_layers_new}\n${layer_id} ${new_layer_name}"
			fi
		done

		echo -e "${_layers_new}"
	else
		echo -e "${_layers}"
	fi
}

insert_layers()
{
	output_dir="${1}"
	html="${2}"
	layers="${3}"

	# FORMAT
	# LAYER_ID LAYER_NAME

	n=0

	LAYERS_LIST_HTML=""

	# All used layers (from all commits)
	# layers=$(find "${output_dir}" -name "layers" -exec cat {} \; | sort | uniq)
	# layers=$(fix_layer_names "${layers}")

	IFS=$'\n'
	for layer in ${layers}; do

		layer_id=$(echo "${layer}" | cut -d " " -f1)
		layer_id_padding=$(printf "%02d" "$layer_id")

		layer_name=$(grep -m1 "${layer_id}" <<< "${layers}" | cut -d" " -f2 | sed "s/\./_/g")

		# Layers
	     F_Cu=0
	   In1_Cu=1
	   In2_Cu=2
	   In3_Cu=3
	   In4_Cu=4
	     B_Cu=31
	  B_Adhes=32
	  F_Adhes=33
	  B_Paste=34
	  F_Paste=35
	  B_SilkS=36
	  F_SilkS=37
	   B_Mask=38
	   F_Mask=39
	Dwgs_User=40
	Cmts_User=41
	Eco1_User=42
	Eco2_User=43
	Edge_Cuts=44
	   Margin=45
	  B_CrtYd=46
	  F_CrtYd=47
	    B_Fab=48
	    F_Fab=49

		# Coloring by ID
		case "${layer_id}" in
			"${B_Adhes}")    layer_color="#3545A8" ;;
			"${B_CrtYd}")    layer_color="#D3D04B" ;;
			"${B_Cu}")       layer_color="#359632" ;;
			"${B_Fab}")      layer_color="#858585" ;;
			"${B_Mask}")     layer_color="#943197" ;;
			"${B_Paste}")    layer_color="#969696" ;;
			"${B_SilkS}")    layer_color="#481649" ;;
			"${Cmts_User}")  layer_color="#7AC0F4" ;;
			"${Dwgs_User}")  layer_color="#0364D3" ;;
			"${Eco1_User}")  layer_color="#008500" ;;
			"${Eco2_User}")  layer_color="#008500" ;;
			"${Edge_Cuts}")  layer_color="#C9C83B" ;;
			"${F_Adhes}")    layer_color="#A74AA8" ;;
			"${F_CrtYd}")    layer_color="#A7A7A7" ;;
			"${F_Cu}")       layer_color="#952927" ;;
			"${F_Fab}")      layer_color="#C2C200" ;;
			"${F_Mask}")     layer_color="#943197" ;;
			"${F_Paste}")    layer_color="#3DC9C9" ;;
			"${F_SilkS}")    layer_color="#339697" ;;
			"${In1_Cu}")     layer_color="#C2C200" ;;
			"${In2_Cu}")     layer_color="#C200C2" ;;
			"${In3_Cu}")     layer_color="#C20000" ;;
			"${In4_Cu}")     layer_color="#0000C2" ;;
			"${Margin}")     layer_color="#D357D2" ;;
			*)             layer_color="" ;;
		esac

		if [[ "${n}" == "0" ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		IFS= read -r -d '' HTML_SNIPPET <<-EOM
		    <input  id="layer-${layer_id_padding}" value="layer-${layer_name}" type="radio" name="layers" onchange="change_layer()" ${checked}/>
		    <label for="layer-${layer_id_padding}" id="label-${layer_id_padding}" class="rounded text-sm-left list-group-item radio-box" onclick="change_layer_onclick()">
		        <span style="margin-left:0.5em; margin-right:0.1em; color: ${layer_color}" class="iconify" data-icon="teenyicons-square-solid" data-inline="false"></span>
		        ${layer_name}
		    </label>
		EOM

		n=$((n+1))

		LAYERS_LIST_HTML="${LAYERS_LIST_HTML}${HTML_SNIPPET}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	LAYERS_LIST_HTML=$(echo ${LAYERS_LIST_HTML} | sed "s/@/-/g")
	echo 's@<!-- FILL_LAYERS_HERE -->@'"${LAYERS_LIST_HTML}"'@g' > .script.sed
	sed -i -f .script.sed "${html}"
	rm -rf .script.sed
}


# Recreate data.js file with right data
data_json()
{
	#
	# TODO: CHECK PATHS USED HERE #########################
	#

	output_dir="${1}"
	layer_files=$(find -mindepth 3 -name layers)

	echo "const data_json = '{ \\"

	IFS=$'\n'

	n_lines=$(echo "$layer_files" | wc -l)
	n_line=0

	for layer_file in $layer_files; do

		n_line=$((n_line + 1))

		commit_folder=$(dirname "$layer_file")
		commit=$(basename ${commit_folder})

		# Commits
		echo -e "\t\"$commit\": \\"
		echo -e "\t{ \\"

		# Layer names
		echo -e "\t\t\"layers\": \\"
		echo -e "\t\t{ \\"
		cat "${layer_file}" | sed 's/[^ ][^ ]*/"&"/g' | sed "s/ /: /g" | sed '$!s/$/,/' | sed "s/\$/ \\\/g" | sed "s/^/\t\t\t/g"
		echo -e "\t\t}, \\"

		# Layer images
		kiri_output_folder=$(basename ${output_dir})
		layer_files=$(find ${commit_folder} -name "*[0-9][0-9]-*.svg" | sort | sed "s/.*${kiri_output_folder}/../g")
		echo -e "\t\t\"layer_imgs\": \\"
		echo -e "\t\t{ \\"
		laye_id_imgs=
		for layer_img in ${layer_files}; do
			layer_id=$(printf "%d" $(echo ${layer_img} | sed "s/.*-\([0-9][0-9]\)-.*/\1/g"))
			if [[ $laye_id_imgs == "" ]]; then
				laye_id_imgs="${layer_id} ${layer_img}"
			else
				laye_id_imgs="${laye_id_imgs}\n${layer_id} ${layer_img}"
			fi
		done
		echo -e "${laye_id_imgs}" | sed 's/[^ ][^ ]*/"&"/g' | sed "s/ /: /g" | sed '$!s/$/,/' | sed "s/\$/ \\\/g" | sed "s/^/\t\t\t/g"
		echo -e "\t\t} \\"

		# Decide it last comma is added or not
		if [[ $n_line == $n_lines ]];then
			echo -e "\t} \\"
		else
			echo -e "\t}, \\"
		fi
	done

	echo "}';"
}

layers_summary()
{
	# Get all used layers
	all_used_layers=$(find -mindepth 3 -name layers -exec cat {} \; | sort | uniq | sed '/^$/d')

	# Group layers by name
	previows_layer_id=-1

	IFS=$'\n'
	layers_summary=""
	for line in ${all_used_layers}; do
		layer_id=$(echo "$line" | cut -d" " -f1)
		layer_names=$(echo -e "${all_used_layers}" | grep "^${layer_id} " | cut -d " " -f2 | tr "\n" " ")
		if [[ "${layer_id}" != "${previows_layer_id}" ]]; then
			if [[ $layers_summary == "" ]]; then
				layers_summary="${layer_id} ${layer_names}"
			else
				layers_summary="${layers_summary}\n${layer_id} ${layer_names}"
			fi
			previows_layer_id=${layer_id}
		fi
	done

	echo -e "${layers_summary}"
}

generate_sch_artifacts_sch2svg()
{
	repo_path=${1}
	kicad_pro_subpath=${2}
	kicad_pro_filename=${3}
	sch_page_names=${4}
	commit1=${5}
	commit2=${6}
	output_dir=${7}

	kicad_sch=$(echo "${sch_page_names}" | cut -d" " -f1).${kicad_sch_extension}

	if [[ ! -f "${output_dir}/${commit1}/${kicad_sch}" ]]; then
		mkdir -p "${output_dir}/${commit1}"

		# Export main schematic page from each version
		if [[ ${commit1} == "local" ]]; then
			cp "${kicad_pro_subpath}/${kicad_sch}" "${output_dir}/${commit1}/${kicad_sch}"
			cp "${kicad_pro_subpath}/board-cache.lib" "${output_dir}/${commit1}/board-cache.lib"
		else
			git show "${commit1}:${kicad_pro_subpath}/${kicad_sch}" > "${output_dir}/${commit1}/${kicad_sch}"
			git show "${commit1}:${kicad_pro_subpath}/board-cache.lib" > "${output_dir}/${commit1}/board-cache.lib"
		fi

		cmd="sch2svg \"${output_dir}/${commit1}/${kicad_sch}\" \"${output_dir}/${commit1}/\""
		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_KIDIFF}" = "1" ]]; then
			echo -e "   ${green}${cmd}${reset}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${red}${bold}   Status: ${ret}${reset}"
				fi
			fi
		fi
		# if [[ ${ret} == 0 ]]; then
			cd "${output_dir}/${commit1}" || exit
			rename "s/^/sch-/g" ./*.svg
			cd - || exit
		# fi
	fi

	if [[ ! -f "${output_dir}/${commit2}/${kicad_sch}" ]]; then
		mkdir -p "${output_dir}/${commit2}"

		# Export main schematic page from each version
		if [[ ${commit2} == "local" ]]; then
			cp "${kicad_pro_subpath}/${kicad_sch}" "${output_dir}/${commit2}/${kicad_sch}"
			cp "${kicad_pro_subpath}/board-cache.lib" "${output_dir}/${commit2}/board-cache.lib"
		else
			git show "${commit2}:${kicad_pro_subpath}/${kicad_sch}" > "${output_dir}/${commit2}/${kicad_sch}"
			git show "${commit2}:${kicad_pro_subpath}/board-cache.lib" > "${output_dir}/${commit2}/board-cache.lib"
		fi

		cmd="sch2svg \"${output_dir}/${commit2}/${kicad_sch}\" \"${output_dir}/${commit1}/\""
		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_KIDIFF}" = "1" ]]; then
			echo -e "   ${green}${cmd}${reset}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${red}${bold}   Status: ${ret}${reset}"
				fi
			fi
		fi
		# if [[ ${ret} == 0 ]]; then
			cd "${output_dir}/${commit2}" || exit
			rename "s/^/sch-/g" ./*.svg
			cd - || exit
		# fi
	fi
}

generate_sch_artifacts()
{
	repo_path=${1}
	kicad_pro_subpath=${2}
	kicad_pro_filename=${3}
	sch_page_names=${4}
	commit1=${5}
	commit2=${6}
	output_dir=${7}

	removed_color="FF0000"
	added_color="008FFF"
	unchanged_color="FFFFFF"
	background_color="222222"

	# Temporarily change local commits
	if [[ "${commit1}" == "local" ]]; then commit1=""; fi
	if [[ "${commit2}" == "local" ]]; then commit2=""; fi

	if [[ ! "${PLOTGITSCH_MISSING}" == 1 ]]; then

		if [[ ${kicad_pro_subpath} != "." ]]; then
			nested_project_param="-r ${kicad_pro_subpath}"
		fi

		if [[ ${SKIP_CACHE_LIB} == 0 ]]; then
			cache_lib_param="-l ${kicad_pro_subpath}/${kicad_pro_filename}-cache.lib"
		fi

		cmd="plotgitsch ${nested_project_param} ${cache_lib_param} -k -m -c ${removed_color}:${added_color}:${unchanged_color}:${background_color} ${commit1} ${commit2} ${STDOUT_PLOTGITSCH}"
		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
			echo -e "   ${green}${cmd}${reset}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${red}${bold}   Status: ${ret}${reset}"
				fi
			fi
		fi
	fi

	# IFS=$'\n'
	# for sch_page_name in ${sch_page_names}; do
	# 	# Create blank svg when it is missing
	# 	if [[ ! -f "sch1-${sch_page_name}.svg" ]]; then
	# 		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
	# 			echo -e "   ${red}Recreating missing sch1-${sch_page_name}.svg${reset}"
	# 		fi
	# 		cp "${script_path}/../assets/blank.svg" "sch1-${sch_page_name}.svg"
	# 	fi
	# 	# Create blank svg when it is missing
	# 	if [[ ! -f "sch2-${sch_page_name}.svg" ]]; then
	# 		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
	# 			echo -e "   ${red}Recreating missing sch2-${sch_page_name}.svg${reset}"
	# 		fi
	# 		cp "${script_path}/../assets/blank.svg" "sch1-${sch_page_name}.svg"
	# 	fi
	# done

	# Revert back
	if [[ "${commit1}" == "" ]]; then commit1="local"; fi
	if [[ "${commit2}" == "" ]]; then commit2="local"; fi

	create_list_of_pages "${commit1}" "${output_dir}"
	create_list_of_pages "${commit2}" "${output_dir}"

	IFS=$'\n'
	for sch_page_svg in *.svg; do

		# Background has to be transparent
		sed -i 's/fill="#FFFFFF"/fill="#FFFFFF00"/g' "${sch_page_svg}" &> /dev/null
		sed -i 's/fill="#222222"/fill="#22222200"/g' "${sch_page_svg}" &> /dev/null

		# Schematic elements have to be black
		sed -i 's/fill="#FF0000"/fill="#000000FF"/g' "${sch_page_svg}" &> /dev/null
		sed -i 's/fill="#00FF00"/fill="#000000FF"/g' "${sch_page_svg}" &> /dev/null
		sed -i 's/stroke="#800000"/stroke="#000000FF"/g' "${sch_page_svg}" &> /dev/null

		case "${sch_page_svg}" in

			sch1-*)
				new_sch_name=${sch_page_svg//sch1/sch}
				svg_file1="${output_dir}/${commit1}/${new_sch_name}"

				mv -f "${sch_page_svg}" "${svg_file1}" 2> /dev/null

				# Fix problematic last svg tag. But how this was introduced?
				# sed -i "s|</svg>svg>|</svg>|g" "${svg_file1}" 2> /dev/null

				# scour -i "${svg_file1}" -o output.svg --enable-viewboxing --enable-id-stripping --enable-comment-stripping --shorten-ids --indent=none &> /dev/null
				# if [[ -f output.svg ]]; then
				# 	mv output.svg "${svg_file1}"
				# fi
				;;

			sch2-*)
				new_sch_name=${sch_page_svg//sch2/sch}
				svg_file2="${output_dir}/${commit2}/${new_sch_name}"

				mv -f "${sch_page_svg}" "${svg_file2}" 2> /dev/null

				# Fix problematic last svg tag. But how this was introduced?
				# sed -i "s|</svg>svg>|</svg>|g" "${svg_file2}" 2> /dev/null

				# scour -i "${svg_file2}" -o output.svg --enable-viewboxing --enable-id-stripping --enable-comment-stripping --shorten-ids --indent=none &> /dev/null
				# if [[ -f output.svg ]]; then
				# 	mv output.svg "${svg_file2}"
				# fi
				;;
		esac

		if [ ! -s "${svg_file1}" ]; then
			echo "Removing empty file ${svg_file1}"
			rm -rf "${svg_file1}"
		fi

		if [ ! -s "${svg_file2}" ]; then
			echo "Removing empty file ${svg_file2}"
			rm -rf "${svg_file2}"
		fi

	done
}

create_list_of_layers()
{
	_kicad_pcb="$1"

	_board_path=$(dirname "${_kicad_pcb}")
	layers_file=${_board_path}/layers

	# FORMAT: https://dev-docs.kicad.org/en/file-formats/sexpr-pcb/#_layers_section
	# (layers (ORDINAL "CANONICAL_NAME" TYPE ["USER_NAME"])
	# Type: jumper, mixed, power, signal, user

	if [[ ${PCBS_VERSION} -lt 20211014 ]]; then
		# Format = (2 Pwr power)
		_usedboard_layers=$(sed -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${_kicad_pcb}" | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f-2 | sed "s/\r$//g" | sed "s/\"//g" | sed '/^[[:space:]]*$/d')
	else
		# Format = (2 "In2.Cu" power "Pwr")
		_usedboard_layers=$(sed -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${_kicad_pcb}" | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | sed "s/\r$//g" | sed "s/\"//g" | sed '/^[[:space:]]*$/d')
		# transform on v5 format for now
		fixed_usedboard_layers=""
		for line in ${_usedboard_layers}; do
			original_layer_name=$(echo "${line}" | cut -d" " -f2)
			custom_layer_name=$(echo "${line}" | sed "s/ hide//g" | sed -r "s/(jumper|mixed|power|signal|user)/TYPE/g" | cut -d" " -f4)
			if [[ ${custom_layer_name} != "" ]]; then
				line=$(echo "${line}" | sed "s/ ${custom_layer_name} / tmp_${custom_layer_name} /g")
				line=$(echo "${line}" | sed "s/ ${original_layer_name} / ${custom_layer_name} /g")
				line=$(echo "${line}" | sed "s/ tmp_${custom_layer_name} / ${original_layer_name} /g")
			fi
			if [[ ${fixed_usedboard_layers} == "" ]]; then
				fixed_usedboard_layers="${line}"
			else
				fixed_usedboard_layers="${fixed_usedboard_layers}\n${line}"
			fi
		done
		_usedboard_layers="$(echo -e "${fixed_usedboard_layers}" | cut -d" " -f-2)"
		#============================
		# fi
	fi

	if [[ "${VERBOSE}" == "1" ]]; then
		echo
		echo -e "${blue}Board: ${reset}${_kicad_pcb}"
		echo -e "${blue}Used layers:${reset}"
		echo -e "${_usedboard_layers}" | column -t | nl -s": "
		echo
	fi

	echo -e "${_usedboard_layers}" > "${layers_file}"

	# Fix layers name on icad 6 for older projects
	if [[ ${KICAD_VERSION} == 6 ]] && [[ ${PCBS_VERSION} -lt 20211014 ]]; then
		_layers=$(cat "${layers_file}")
		_layers=$(fix_layer_names "${_layers}")
		echo -e "${_layers}" > "${layers_file}"
	fi
}

create_list_of_pages()
{
	commit_hash="$1"
	output_dir="$2"
	pages_file="${output_dir}/${commit_hash}/pages"

	if [[ ! -f ${pages_file} ]]
	then

		# Export main schematic page from each version
		if [[ ${commit_hash} == "local" ]]; then
			cp "${kicad_pro_subpath}/${kicad_sch}" "${output_dir}/${commit_hash}/${kicad_sch}"
		else
			git show "${commit_hash}:${kicad_pro_subpath}/${kicad_sch}" > "${output_dir}/${commit_hash}/${kicad_sch}"
		fi

		sch_page_names=$(get_pages "${kicad_pro_filename}" "${output_dir}/${commit_hash}/${kicad_sch}" | cut -d"|" -f2 | sed "s/\r$//g")

		if [[ "${VERBOSE}" == "1" ]]; then
			echo
			echo -e "${blue}Schematic: ${reset}${output_dir}/${commit_hash}/${kicad_sch}"
			echo -e "${blue}Pages:${reset}"
			echo "${sch_page_names}" | nl -s": "
			echo
		fi

		echo -e "${sch_page_names}" > "${pages_file}"
	fi
}

pages_summary()
{
	# Get all used pages
	all_used_pages=$(find -mindepth 3 -name pages -exec cat {} \; | sort | uniq | sed '/^$/d')

	# Group pages by name
	previows_layer_id=-1

	IFS=$'\n'
	pages_summary=""
	for line in ${all_used_pages}; do
		layer_id=$(echo "$line" | cut -d" " -f1)
		layer_names=$(echo -e "${all_used_pages}" | grep "^${layer_id} " | cut -d " " -f2 | tr "\n" " ")
		if [[ "${layer_id}" != "${previows_layer_id}" ]]; then
			if [[ $pages_summary == "" ]]; then
				pages_summary="${layer_id} ${layer_names}"
			else
				pages_summary="${pages_summary}\n${layer_id} ${layer_names}"
			fi
			previows_layer_id=${layer_id}
		fi
	done

	echo -e "${pages_summary}"
}

generate_pcb_artifacts()
{
	kicad_pro_subpath=${1}
	kicad_pro_filename=${2}
	kicad_pcb=${3}
	commit1=${4}
	commit2=${5}
	output_dir="${6}"

	# Temporarily change local commits
	if [[ "${commit1}" == "local" ]]; then commit1="${kicad_pcb}"; fi
	if [[ "${commit2}" == "local" ]]; then commit2="${kicad_pcb}"; fi

	if [[ ! "${KIDIFF_MISSING}" == 1 ]]; then

		# WORKAROUND IT DOES NOT RUN FROM EXTERNAL FOLDER OR REPO ROOT PATH
		# if [[ "${kicad_pro_subpath}" != "." ]]; then
			# cd "${kicad_pro_subpath}" || exit
		# fi

		if [[ ${PAGE_FRAME} == "1" ]]; then
			page_frame_parameter="-f"
		fi

		cmd="kidiff ${kicad_pcb} --webserver-disable -b ${commit1} -a ${commit2} -o \"${output_dir}\" ${page_frame_parameter} ${STDOUT_KIDIFF}"
		if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_KIDIFF}" = "1" ]]; then
			echo -e "   ${green}${cmd}${reset}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo -e "${red}${bold}   Status: ${ret}${reset}"
				fi
			fi
		fi

		# WORKAROUND IT DOES NOT RUN FROM EXTERNAL FOLDER OR REPO ROOT PATH
		cd - &> /dev/null || exit

		# Discard textual diffs
		if [ -f "${output_dir}/diff.txt" ]; then
			rm -rf "${output_dir}/diff.txt"
		fi

		# Restore names
		if [[ "${commit1}" == "${kicad_pcb}" ]]; then commit1="local"; fi
		if [[ "${commit2}" == "${kicad_pcb}" ]]; then commit2="local"; fi
	fi

	# Generate a list of layers of each commit
	kicad_pcb_name=$(basename "${kicad_pcb}")
	if [[ ! -f "${output_dir}/${commit1}/layers" ]]; then
		create_list_of_layers "${output_dir}/${commit1}/${kicad_pcb_name}"
	fi
	if [[ ! -f "${output_dir}/${commit2}/layers" ]]; then
		create_list_of_layers "${output_dir}/${commit2}/${kicad_pcb_name}"
	fi

	usedboard_layers=$(cat "${output_dir}/${commit1}/layers" "${output_dir}/${commit2}/layers" | sort | uniq )

	IFS=$'\n'
	for layer in ${usedboard_layers}; do

		layer_id=$(echo "${layer}" | cut -d " " -f1)
		layer_id=$(printf "%02d" "${layer_id}")

		layer_name=$(echo "${layer}" | cut -d " " -f2 | sed "s/\./_/g")

		svg_file1="${output_dir}/${commit1}/${kicad_pro_filename}-${layer_id}-${layer_name}.svg"
		svg_file2="${output_dir}/${commit2}/${kicad_pro_filename}-${layer_id}-${layer_name}.svg"

		# Create blank svgs if some is missing
		if [[ ! -f "${svg_file1}" ]]; then

			continue

			# if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_KIDIFF}" = "1" ]]; then
			# 	echo -e "   ${red}Recreating missing file: ${svg_file1}${reset}"
			# fi
			# cp "${script_path}/../assets/blank.svg" "${output_dir}/${i}/${kicad_pro_filename}-${layer_id}-${layer_name}.svg"

		else
			# echo "Inkscaping ${svg_file1}"
			# inkscape --export-type="eps" --export-filename="tmp.eps" --export-area-drawing "${svg_file1}"
			# inkscape tmp.eps --export-plain-svg --export-filename="${svg_file1}"

			continue
			# scour -i "${svg_file1}" -o output.svg --enable-viewboxing --enable-id-stripping --enable-comment-stripping --shorten-ids --indent=none &> /dev/null
			# if [[ -f output.svg ]]; then
			# 	mv output.svg "${svg_file1}"
			# fi

		fi

		# Create blank svgs if some is missing
		if [[ ! -f "${svg_file2}" ]]; then

			continue

			# if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_KIDIFF}" = "1" ]]; then
			# 	echo -e "   ${red}Recreating missing file: ${svg_file2}${reset}"
			# fi
			# cp "${script_path}/../assets/blank.svg" "${output_dir}/${j}/${kicad_pro_filename}-${layer_id}-${layer_name}.svg"

		else
			# echo "Inkscaping ${svg_file2}"
			# inkscape --export-type="eps" --export-filename="tmp.eps" --export-area-drawing "${svg_file2}"
			# inkscape tmp.eps --export-plain-svg --export-filename="${svg_file2}"

			continue
			# scour -i "${svg_file2}" -o output.svg --enable-viewboxing --enable-id-stripping --enable-comment-stripping --shorten-ids --indent=none &> /dev/null
			# if [[ -f output.svg ]]; then
			# 	mv output.svg "${svg_file2}"
			# fi

		fi

	done
}

generate_scm_artifacts()
{
	script_path=${1}
	repo_path=${2}
	kicad_pro_subpath=${3}
	kicad_sch=${4}
	kicad_pcb=${5}
	kicad_pro_filename=${6}
	output_dir=${7}

	echo -e "\n${blue}Output folder:${reset} ${output_dir}"
	if [[ "${REMOVE_KIRI_FOLDER}" == "1" ]]; then
		echo -e "${red}Removing leftovers from the previous run${reset}"
		rm -rf "${output_dir}"
	fi

	web_dir="${output_dir}/web/"
	mkdir -p "${web_dir}/"

	sch_files=$(git ls-files . | grep "\.${kicad_sch_extension}")

	if [[ "${VERBOSE}" == "1" ]]; then
		echo
		echo "        kicad_pcb: ${kicad_pro_subpath}/${kicad_pcb}"
		echo "        kicad_sch: ${kicad_sch}"
		echo "        sch_files: $(echo "${sch_files}" | sed 's/ /\n                   /g')"
		echo "       output_dir: ${output_dir}"
		echo "          web_dir: ${web_dir}"
		echo
	fi

	git_branch=$(git rev-parse --abbrev-ref HEAD)

	if [[ "$ALL_COMMITS" == "1" ]]; then
		cmd="kiri-git-log ${git_branch} -- ${kicad_pro_subpath}"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo
			echo "${green}${cmd}${reset}"
			echo
		fi
		commits=$(eval "${cmd}")
	else
		cmd="kiri-git-log ${git_branch} -- ${sch_files} ${kicad_pro_subpath}/${kicad_pcb}"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo -e "${blue}Getting commits:${reset}"
			echo -e "${green}${cmd}${reset}"
			echo
		fi
		commits=$(eval "${cmd}")
	fi

	if [[ "${OLDER_COMMIT}" != "" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Older commit: ${OLDER_COMMIT}"
		fi
		commits=$(echo "${commits}" | sed "/^${OLDER_COMMIT}/q")
	fi

	if [[ "${NEWER_COMMIT}" != "" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Newer commit: ${NEWER_COMMIT}"
			echo
		fi
		commits=$(echo "${commits}" | sed -n "/^${NEWER_COMMIT}/,\$p")
	fi

	if [[ "${SHOW_LAST_N_COMMITS}" != "" ]]; then
		commits=$(echo "${commits}" | head -n "${SHOW_LAST_N_COMMITS}")
	fi

	if [[ "${VERBOSE}" == "1" ]]; then
		echo -e "${blue}Commits list:${reset}"
		echo "${commits}" | nl -s": " | cut -c -$(($(tput cols)-2))
	fi

	# Commits list has to have 2 commits at least
	if [[ $(echo "${commits}" | wc -l | sed "s/^[ \t]\+//g") -lt "1" ]]; then
		echo "Leaving, less than 2 commits found"
		exit 0
	fi

	# Add local file to be compared against other commits
	IFS= read -r -d '' commits <<-EOM
	local
	${commits}
	EOM

	hashs=$(echo "${commits}" | tac_ | cut -d' '  -f1);
	n_hashs=$(echo "${hashs}" | wc -w | sed "s/^[ \t]\+//g")
	n_comparisons=$(echo "${n_hashs} * (${n_hashs} - 1) " | bc)

	# THESE 2 LINES SHOULD BE REMOVED
	sch_page_names=$(get_pages "${kicad_pro_filename}" "${kicad_pro_subpath}/${kicad_sch}" | cut -d"|" -f2 | sed "s/\r$//g")
	# usedboard_layers=$(sed -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${kicad_pro_subpath}/${kicad_pcb}" | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f-2 | sed "s/\r$//g" | sed "s/\"//g")

	echo
	echo -e "${blue}Generating artifacts${reset}"
	echo "${n_hashs} commits, totaling ${n_comparisons} comparisons"
	echo

	n=0

	IFS=$'\n'
	for i in ${hashs}; do

		k=0

		for j in ${hashs}; do

			if [[ "${i}" != "${j}" ]]; then

				k=$((k+1))
				n=$((n+1))

				# Check if diff file exists
				if [[ -d "${output_dir}/${j}" ]]; then
					continue
				fi

				if [[ -d "${output_dir}/${j}" ]]; then
					skipping=", skipping..."
				else
					skipping=""
				fi

				if [[ ${k} == 1 ]]; then
					printf "%4d. %s - %s%s\n" "${n}" "${i}" "${j}" "${skipping}"
				else
					printf "%4d. %s - %s%s \n" "${n}" "       " "${j}" "${skipping}"
				fi

				mkdir -p "${output_dir}/${i}/"
				mkdir -p "${output_dir}/${j}/"

				STDOUT_PLOTGITSCH="&> /dev/null"
				STDOUT_KIDIFF="&> /dev/null"

				if [[ "${DEBUG}" == 1 ]]; then
					STDOUT_PLOTGITSCH=""
					STDOUT_KIDIFF=""
				fi

				if [[ "${DEBUG_PLOTGITSCH}" == 1 ]]; then
					STDOUT_PLOTGITSCH=""
				fi

				if [[ "${DEBUG_KIDIFF}" == 1 ]]; then
					STDOUT_KIDIFF=""
				fi

				# Kicad-6 boards do not have a schematic view working yet, so skip plotgitsch
				if [[ ${PCBS_VERSION} -lt 20211014 ]]; then
					generate_sch_artifacts "${repo_path}" "${kicad_pro_subpath}" "${kicad_pro_filename}" "${sch_page_names}" "${i}" "${j}" "${output_dir}"
				# else
					# generate_sch_artifacts_sch2svg "${repo_path}" "${kicad_pro_subpath}" "${kicad_pro_filename}" "${sch_page_names}" "${i}" "${j}" "${output_dir}"
				fi

				generate_pcb_artifacts "${kicad_pro_subpath}" "${kicad_pro_filename}" "${kicad_pcb}" "${i}" "${j}" "${output_dir}"

				if [[ "${VERBOSE}" == "1" ]]; then
					echo
				fi
			fi
		done

	done

	# Remove unecessary Kidiff triptych folder
	rm -rf "${web_dir}/triptych"

	if [[ "${VERBOSE}" == "0" ]]; then
		echo
	fi
	echo -e "${blue}Assembling the HTML${reset}"


	# Copy assets
	main_html=index.html
	cp -f "${script_path}/../assets/${main_html}"  "${web_dir}/"
	cp -f "${script_path}/../assets/kiri.js"       "${web_dir}/"
	cp -f "${script_path}/../assets/data.js"       "${web_dir}/"
	cp -f "${script_path}/../assets/kiri.css"      "${web_dir}/"
	cp -f "${script_path}/../assets/blank.svg"     "${web_dir}/"
	cp -f "${script_path}/../assets/favicon.ico"   "${web_dir}/"
	cp -f "${script_path}/../assets/redirect.html" "${web_dir}/../index.html"
	cp -f "${script_path}/../bin/kiri-server"      "${output_dir}/"

	# Selected commit index
	commit1_idx=0
	commit2_idx=1

	# Insert commits list
	echo "- Adding commits list to the page"
	insert_commits "${web_dir}/${main_html}" "${commits}" "${commit1_idx}" "${commit2_idx}" "${kicad_pro_subpath}" "${kicad_pcb}" "${sch_files}"

	# Insert pages list
	echo "- Adding schematic pages list to the page"
	insert_pages "${web_dir}/${main_html}" "${sch_page_names}"

	# Set-Project title (folder name)
	PROJECT_TITLE=$(basename "${repo_path}")
	echo "- Setting project title: ${PROJECT_TITLE}"
	sed -i "s|\[PROJECT_TITLE\]|${PROJECT_TITLE}|g" "${web_dir}/${main_html}"

	# Update board title
	sch_title=$(grep -i "title " "${kicad_pro_subpath}/${kicad_pro_filename}.${kicad_sch_extension}" 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	pcb_title=$(grep -i "(title .*)" "${kicad_pcb}" 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	if [[ "${sch_title}" == "" ]]; then sch_title="{SCH_Title}"; fi
	if [[ "${pcb_title}" == "" ]]; then pcb_title="{PCB_Title}"; fi
	echo "- Setting sch page title: ${sch_title}"
	echo "- Setting pcb page title: ${pcb_title}"
	sed -i "s|\[SCH_TITLE\]|Sch \| ${sch_title}|g" "${web_dir}/${main_html}"
	sed -i "s|\[PCB_TITLE\]|PCB \| ${pcb_title}|g" "${web_dir}/${main_html}"

	# Update board revision
	sch_revision=$(grep -i "Rev" "${kicad_pro_subpath}/${kicad_pro_filename}.${kicad_sch_extension}" 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	pcb_revision=$(grep "(rev " "${kicad_pcb}" 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	if [[ "${pcb_revision}" == "" ]]; then pcb_revision="{sch_rev}"; fi
	if [[ "${sch_revision}" == "" ]]; then sch_revision="{pcb_rev}"; fi
	echo "- Setting sch revision: ${sch_revision}"
	echo "- Setting pcb revision: ${pcb_revision}"
	sed -i "s|\[SCH_REVISION\]|${sch_revision}|g" "${web_dir}/${main_html}"
	sed -i "s|\[PCB_REVISION\]|${pcb_revision}|g" "${web_dir}/${main_html}"

	# Update board date
	sch_date=$(grep -i "date" "${kicad_pro_subpath}/${kicad_pro_filename}.${kicad_sch_extension}" 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	pcb_date=$(grep "(date " "${kicad_pcb}" 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	if [[ "${sch_date}" == "" ]]; then sch_date="{sch_date}"; fi
	if [[ "${pcb_date}" == "" ]]; then pcb_date="{pcb_date}"; fi
	echo "- Setting sch date: ${sch_date}"
	echo "- Setting pcb date: ${pcb_date}"
	sed -i "s|\[PCB_DATE\]|${pcb_date}|g" "${web_dir}/${main_html}"
	sed -i "s|\[SCH_DATE\]|${sch_date}|g" "${web_dir}/${main_html}"

	# Update board's name
	echo "- Setting board's name: ${kicad_pro_filename}"
	sed -i "s|var board_name =.*|var board_name = \"${kicad_pro_filename}\"; // updated by kiri script|g" "${web_dir}/kiri.js"

	commit1=$(echo "${commits}" | head -n$(("${commit1_idx}"+1)) | tail -n1 | cut -d" " -f1)
	commit2=$(echo "${commits}" | head -n$(("${commit2_idx}"+1)) | tail -n1 | cut -d" " -f1)

	# Initial commit legend
	echo "- Setting initial selected commits: ${commit1}, ${commit2}"
	sed -i "s|\[COMMIT_1_HASH\]|${commit1}|g" "${web_dir}/${main_html}"
	sed -i "s|\[COMMIT_2_HASH\]|${commit2}|g" "${web_dir}/${main_html}"

	# Update initial schematic images
	sch_img_1="../${commit1}/sch-${kicad_pro_filename}.svg"
	sch_img_2="../${commit2}/sch-${kicad_pro_filename}.svg"
	echo "- Setting initial schematics"
	echo "  | Sch1: ${web_dir}/${sch_img_1}"
	echo "  | Sch2: ${web_dir}/${sch_img_2}"
	sed -i "s|\[INITIAL_COMMIT_1_SCH\]|${sch_img_1}|g" "${web_dir}/${main_html}"
	sed -i "s|\[INITIAL_COMMIT_2_SCH\]|${sch_img_2}|g" "${web_dir}/${main_html}"

	# Generate layers summary
	echo "- Generating pages summary"
	pages_summary > "${web_dir}/../pages"
	echo "- Generating layers summary"
	layers_summary > "${web_dir}/../layers"
	echo "- Generating data.js"
	data_json "${output_dir}" > "${web_dir}/data.js"

	# Update initial layout images
	# usedboard_layers=$(find "${output_dir}" -name "layers" -exec cat {} \; | sort | uniq)
	usedboard_layers=$(cat ${web_dir}/../layers)
	initial_layer_id=$(printf "%02d" $(echo -e "${usedboard_layers}" | head -1 | cut -d " " -f1 | tr "." "_"))
	initial_layer_name=$(echo -e "${usedboard_layers}" | sed '/^$/d' | head -1 | cut -d " " -f2 | tr "." "_")
	pcb_img_1="../${commit1}/${kicad_pro_filename}-${initial_layer_id}-${initial_layer_name}.svg"
	pcb_img_2="../${commit2}/${kicad_pro_filename}-${initial_layer_id}-${initial_layer_name}.svg"
	echo "- Setting initial layer: ${initial_layer_id}, ${initial_layer_name}"
	echo "  | PCB1: ${web_dir}/${pcb_img_1}"
	echo "  | PCB2: ${web_dir}/${pcb_img_2}"
	sed -i "s|\[INITIAL_COMMIT_1_PCB\]|${pcb_img_1}|g" "${web_dir}/${main_html}"
	sed -i "s|\[INITIAL_COMMIT_2_PCB\]|${pcb_img_2}|g" "${web_dir}/${main_html}"

	# Change initial view to layout
	if [[ "${START_ON_LAYOUT_VIEW}" == 1 ]]; then
		echo "- Setting initial view to layout"
		sed -i "s/default_view = \"schematic\";/default_view = \"layout\";/g" "${web_dir}/kiri.js"
	fi

	# Insert layers list
	echo "- Adding layers list to the page"
	insert_layers "${output_dir}" "${web_dir}/${main_html}" "${usedboard_layers}"

	# Adjust server's port
	if [[ "${WEBSERVER_PORT}" != "" ]]; then
		echo "- Setting server's port: ${WEBSERVER_PORT}"
		sed -i "s|var port =.*|var port = ${WEBSERVER_PORT}; // updated by kiri script|g" "${web_dir}/kiri.js"
	fi
}


# ====================================================================
# ====================================================================

trap ctrl_c INT

script_path=$(readlink_ "$0")
script_path=$(dirname "${script_path}")

export ALL_COMMITS=0
export DEBUG=0
export DEBUG_PLOTGITSCH=0
export DEBUG_KIDIFF=0
export DRY_RUN=0
export START_SERVER=1
export LAUNCH_BROWSER=1
export NEWER_COMMIT=""
export OLDER_COMMIT=""
export REMOVE_KIRI_FOLDER=0
export VERBOSE=0
export WEBSERVER_PORT=
export OUTPUT_DIR=.kiri
export SHOW_LAST_N_COMMITS=
export SKIP_CACHE_LIB=0
export START_ON_LAYOUT_VIEW=0
export PAGE_FRAME=0

while [[ $# -gt 0 ]]
do
	key="${1}"

	case ${key} in
	-a|--all)
		ALL_COMMITS=1
		shift
		;;

	-d|--output-dir)
		OUTPUT_DIR=${2}
		shift
		shift
		;;

	-y|--dry-run)
		DRY_RUN=1
		START_SERVER=0
		VERBOSE=1
		shift
		;;

	-h|--help)
		show_help
		exit 0
		;;

	-l|--no-server)
		START_SERVER=0
		shift
		;;

	-n|--newer)
		NEWER_COMMIT="${2}"
		shift
		shift
		;;

	-t|--last)
		SHOW_LAST_N_COMMITS="${2}"
		shift
		shift
		;;

	-o|--older)
		OLDER_COMMIT="${2}"
		shift
		shift
		;;

	-r|--remove)
		REMOVE_KIRI_FOLDER=1
		shift
		;;

	-p|--port)
		WEBSERVER_PORT="${2}"
		shift
		shift
		;;

	-V|--verbose)
		VERBOSE=1
		shift
		;;

	-v|--version)
		show_version
		exit 0
		;;

	-D|--debug)
		DEBUG=1
		DEBUG_KIDIFF=1
		DEBUG_PLOTGITSCH=1
		shift
		;;

	-Dp|-DP|-dp|--debug-plotgitsch)
		DEBUG_PLOTGITSCH=1
		shift
		;;

	-Dk|-DK|-dk|--debug-kidiff)
		DEBUG_KIDIFF=1
		shift
		;;

	-x|--archive)
		ARCHIVE=1
		START_SERVER=0
		shift
		;;

	-s|--skip-cache)
		SKIP_CACHE_LIB=1
		shift
		;;

	-S|--server-only)
		LAUNCH_BROWSER=0
		shift
		;;

	-u|--layout)
		START_ON_LAYOUT_VIEW=1
		shift
		;;

	-f|--frame)
		PAGE_FRAME=1
		shift
		;;

	*)
		kicad_pro="${1}"
		shift
		;;
	esac
done

if [[ "${kicad_pro}" == "" ]]; then
	if check_tool "zenity" &> /dev/null; then

		if [[ ${DISPLAY} == "" ]]; then
			export DISPLAY=:0.0
		fi

		kicad_pro=$(\
			zenity \
				--filename="$(pwd)"/ \
				--title "Select Kicad project" \
				--file-selection \
				--file-filter="Kicad Project | *.kicad_pro | *.pro" \
				--file-filter='All files | *')
		ret=$?
	else
		kicad_pro=$(kiri-file-picker)
	fi
fi

if [[ $ret -gt 0 ]]; then
	exit 1
fi

if [[ ! -f "${kicad_pro}" ]]; then
	echo "Kicad project \"${kicad_pro}\" does not exit"
	exit 1
fi

if [[ ${OUTPUT_DIR} != "" ]]; then
	output_dir=$(realpath "${OUTPUT_DIR}")
	mkdir -p "${output_dir}"
else
	echo "output_dir is missing"
	exit 1
fi

# DISCOVER REPO_PATH
kicad_pro_dirpath=$(dirname "${kicad_pro}")
pushd "${kicad_pro_dirpath}" &> /dev/null || exit
repo_path="$(git rev-parse --show-toplevel)"

# THESE ARE ALL THE PATHS NEEDED (WORKS FROM EVERYWHERE)
kicad_pro_path=$(realpath "${kicad_pro}")
repo_path=$(realpath "${repo_path}")
kicad_pro_subpath=$(dirname "${kicad_pro_path}" | sed "s|${repo_path}||g" | sed "s|^/||g")
kicad_pro=$(basename "${kicad_pro}")
kicad_pro_filename=${kicad_pro%.*}
kicad_pro_extension=${kicad_pro##*.}

if [[ "${kicad_pro_subpath}" == "" ]]; then
	kicad_pro_subpath="."
fi

pushd "${repo_path}" &> /dev/null || exit

KICAD_VERSION=$(kicad_version.py --major)
export KICAD_VERSION

kicad_pcb_extension="kicad_pcb"
if [[ ${kicad_pro_extension} == "kicad_pro" ]]; then
	echo "Kicad >= 5.99 project"
	# source "${script_path}/env-nightly.sh"
	export kicad_sch_extension="kicad_sch"
else
	export kicad_sch_extension="sch"
fi

kicad_sch="${kicad_pro_filename}.${kicad_sch_extension}"
kicad_pcb="${kicad_pro_filename}.${kicad_pcb_extension}"

# (kicad_pcb (version 4) (host kicad "dummy file") )
# (kicad_pcb (version 20171130) (host pcbnew "(5.0.0-rc2-76-gb5f63567d)")
# (kicad_pcb (version 20171130) (host pcbnew "(5.1.6)-1")
# (kicad_pcb (version 20171130) (host pcbnew 5.0.0-rc3-unknown-eaf938c~65~ubuntu18.04.1)
# (kicad_pcb (version 20171130) (host pcbnew 5.0.1-33cea8e~67~ubuntu18.04.1)
# (kicad_pcb (version 20171130) (host pcbnew 5.1.5+dfsg1-2~bpo10+1)
# (kicad_pcb (version 20171130) (host pcbnew 5.1.6-c6e7f7d~86~ubuntu20.04.1)
# (kicad_pcb (version 20171130) (host pcbnew 6.0.0-rc1-unknown-da35b16~65~ubuntu18.04.1)
# (kicad_pcb (version 20200104) (host pcbnew "(5.99.0-879-ga0698723b)")
# (kicad_pcb (version 20210606) (generator pcbnew)
PCBS_VERSION=$(head -n1 "${kicad_pcb}" | sed "s/[()]//g" | cut -f3 -d" ")

echo
echo "        CURRENT_PATH = $(pwd)"
echo "      kicad_pro_path = $kicad_pro_path"
echo "           repo_path = $repo_path"
echo "   kicad_pro_subpath = ${kicad_pro_subpath}"
echo "           kicad_pro = ${kicad_pro}"
echo "           kicad_sch = ${kicad_sch}"
echo "           kicad_pcb = ${kicad_pcb}"
echo "       KICAD_VERSION = ${KICAD_VERSION}"
echo "   KICAD_PCB_VERSION = ${PCBS_VERSION}"
echo "  kicad_pro_filename = ${kicad_pro_filename}"
echo " kicad_pro_extension = ${kicad_pro_extension}"
echo " kicad_sch_extension = ${kicad_sch_extension}"
echo " kicad_pcb_extension = ${kicad_pcb_extension}"
echo "          output_dir = ${output_dir}"

# Kicad-6 boards do not have a schematic view working yet
if [[ ${PCBS_VERSION} -ge 20211014 ]]; then
	START_ON_LAYOUT_VIEW=1
fi

PLOTGITSCH_MISSING=$(check_tool plotgitsch)
export PLOTGITSCH_MISSING

KIDIFF_MISSING=$(check_tool kidiff)
export KIDIFF_MISSING

# Check required tools
if [[ "${DRY_RUN}" = 0 ]]; then

	if [[ "${PLOTGITSCH_MISSING}" = 1 ]]; then
		echo "INFO: plotgitsch is missing, skipping schematic diffs"
	fi

	if [[ "${KIDIFF_MISSING}" = 1 ]]; then
		echo "INFO: kidiff is missing, skipping layout diffs"
	fi

fi

if ! check_tool "dos2unix" &> /dev/null; then "dos2unix is missing"; exit; fi

case ${OSTYPE} in
	darwin*)
		if ! check_tool "gsed"  &> /dev/null; then "gsed is missing"; exit; fi
		if ! check_tool "gfind" &> /dev/null; then "gfind is missing"; exit; fi
		;;
esac

# Workaround to fix windows line-endings
if [[ ! -f "${kicad_pro_subpath}/${kicad_pcb}.bkp" ]]; then
	cp "${kicad_pro_subpath}/${kicad_pcb}" "${kicad_pro_subpath}/${kicad_pcb}.bkp" 2> /dev/null
fi
dos2unix "${kicad_pcb}" &> /dev/null

generate_scm_artifacts "${script_path}" "${repo_path}" "${kicad_pro_subpath}" "${kicad_sch}" "${kicad_pcb}" "${kicad_pro_filename}" "${output_dir}"

# Restore board
if [[ -f "${kicad_pro_subpath}/${kicad_pcb}.bkp" ]]; then
	mv -f "${kicad_pro_subpath}/${kicad_pcb}.bkp" "${kicad_pro_subpath}/${kicad_pcb}" &> /dev/null
fi

# =======================

web_dir="${output_dir}/web/"

echo
echo -e "${blue}Output folder:${reset} $(realpath "${OUTPUT_DIR}")"

if [[ ${ARCHIVE} == 1 ]]; then
	datetime=$(date +"%Y.%m.%d-%Hh%M")
	tgz_filename="$(basename "${OUTPUT_DIR}")-${datetime}.tgz"
	echo -e "${blue}Archiving generated files:${reset} ${tgz_filename}"
	tar -cvzf "${tgz_filename}" "${output_dir}" &> /dev/null
fi

if [[ "${START_SERVER}" != 0 ]]; then
	if grep -i -q "Microsoft" "/proc/version" &> /dev/null; then
		# Webserver alternative for Windows with WSL
		host=127.0.0.1
		if [[ "${WEBSERVER_PORT}" == "" ]]; then
			WEBSERVER_PORT=8080
		fi
		if [[ ${LAUNCH_BROWSER} == 1 ]]; then
			cmd.exe /C start "http://${host}:${WEBSERVER_PORT}" &> /dev/null &
		fi
		echo "Starting web-server at http://${host}:${WEBSERVER_PORT}"
		echo "Hit Ctrl+C to end session"
		if python3 -m http.server -d "${web_dir}/../" -b "${host}" "${WEBSERVER_PORT}" &> /dev/null; then
			pid=$!
			kill -9 $pid > /dev/null
		else
			echo
			echo -e "Error: Web-server's port ${WEBSERVER_PORT} already in use."
			echo -e "Close older kiri sessions or change the port with '-p [PORT]'"
			exit 1
		fi
	else
		if [[ "${WEBSERVER_PORT}" != "" ]]; then
			WEBSERVER_PORT_PARAM="-p ${WEBSERVER_PORT}"
		fi
		if [[ ${LAUNCH_BROWSER} == 0 ]]; then
			SERVER_ONLY_FLAG="-S"
		fi
		if kiri-server "${output_dir}" ${WEBSERVER_PORT_PARAM} ${SERVER_ONLY_FLAG} 2> /dev/null; then
			pid=$!
			kill -9 $pid > /dev/null
		else
			echo -e "Something went wrong with kiri-server, try to force the port with '-p'"
			exit 1
		fi
	fi
fi
