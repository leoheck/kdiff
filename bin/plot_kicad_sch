#! /bin/bash

# This tool works with Kicad 6
# Tested on 6.0.4-6f826c9f35~116~ubuntu22.04.1
# Requires: xdootool

readonly TIME=0.1

ctrl_c()
{
	# force to kill the childs
	pkill -P $$ --signal 9 &> /dev/null

	kill -9 "${XVFB_PID}" &> /dev/null
	kill -9 "${EESCHEMA_PID}" &> /dev/null

	# Restore original keyboard layout
	if [[ -n "${original_kbd_lang}" ]]; then
		setxkbmap "${original_kbd_lang}" &> /dev/null
	fi

	exit 1
}

identify_linux_or_wsl()
{
	if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
		echo "WSL"
	else
		echo "Linux"
	fi
}

get_current_display_server()
{
	case "$(identify_linux_or_wsl)" in

		Linux)
			# Check the display server in use (x11 or wayland)
			# loginctl show-session $(awk '/tty/ {print $1}' <(loginctl)) -p Type | awk -F= '{print $2}'
			echo "${XDG_SESSION_TYPE:-unknown}"
			;;

		WSL)
			echo "x11"
			;;
	esac
}

launch_virtual_display()
{
	if [[ -z "$DISPLAY" ]]; then
		export DISPLAY=":0.0"
	fi

	# killall Xvfb &>/dev/null
	# rm -rf "/tmp/.X${n}-lock"
	# rm -rf "/tmp/.X${n}-unix/X1"
	# rm -rf "/tmp/.X${n}*"
	# rm -rf "/tmp/xvfb-run.*"

	# xdpyinfo -display ${DISPLAY} > /dev/null

	# Xvfb -f ${DISPLAY} -screen 1 1280x800x24 &
	# Xvfb -f ${DISPLAY} -fbdir /var/tmp 1280x800x24 -dpi 96 &
	# Xvfb -f ${DISPLAY} -screen 0 640x480x8 -nolisten tcp &
	# Xvfb -f ${DISPLAY} -screen 0 1024x768x16 -dpi 96 &
	# Xvfb -f ${DISPLAY} -screen 0 1280x800x24 -ac -dpi 96 +extension RANDR :1 &
	# export XVFB_PID=${!}

	# echo "xvfb-run"
}

get_filename_without_extension()
{
	local filename="$(basename "${1}")"
	echo "${filename%.*}"
}

get_file_extension()
{
	echo "${1##*.}"
}

get_window_tile()
{
	local win_id="${1}"
	xwininfo -tree -id "${win_id}" 2> /dev/null | grep "xwininfo:" | cut -d" " -f5- | sed "s/\"//g"
}

set_default_plot_settings()
{
	# local eeschema_json="${HOME}/.config/kicad/6.0/eeschema.json"
	local eeschema_json="${HOME}/.config/kicad/7.0/eeschema.json"

	# "plot": {
	#   "background_color": false,
	#   "color": true,
	#   "color_theme": "user",
	#   "format": 0,
	#   "frame_reference": true,
	#   "hpgl_origin": 0,
	#   "hpgl_paper_size": 0,
	#   "hpgl_pen_size": 0.5
	# },

	# 1.   ps - 2
	# 2.  pdf - 4
	# 3.  svg - 5
	# 4.  dxf - 3
	# 5. hpgl - 0

	background_color=false
	color=false
	format=5

	if [[ -f "${eeschema_json}" ]]; then
		sed -i "s/\"background_color\":.*/\"background_color\": ${background_color},/g" "${eeschema_json}"
		sed -i "s/\"color\":.*/\"color\": ${color},/g" "${eeschema_json}"
		sed -i "s/\"format\":.*/\"format\": ${format},/g" "${eeschema_json}"
	fi
}

set_plot_output_directory()
{
	local kicad_prj="${1}"
	local plot_directory="${2}"

	# Kicad 5.0
	sed -i "s|^PlotDirectoryName.*|PlotDirectoryName=${plot_directory}|g" "${kicad_prj}"

	# Kicad 6.0
	sed -i "s|\"plot_directory\":.*|\"plot_directory\": \"${plot_directory}\",|g" "${kicad_prj}"
}

launch_eeschema()
{
	local kicad_sch_path="${1}"
	local kicad_sch_filename=$(get_filename_without_extension "${kicad_sch_path}")

	export EESCHEMA_PID
	export EESCHEMA_WIDS

	# Force English to preserve shortcuts
	# The common value is C.utf8 on my Ubuntu.
	# WSL uses C.UTF-8
	C_UTF8=$(locale -a | grep -i "^C.utf" | head)
	export LC_ALL=${C_UTF8}

	$(launch_virtual_display) eeschema "${kicad_sch_path}" &> /dev/null &
	EESCHEMA_PID=${!}

	# list windows
	# xwininfo -tree -root

	# Can be changed externally
	if [[ -z ${WAIT_FOR_EESCHEMA_S} ]]; then
		WAIT_FOR_EESCHEMA_S=0.5
	fi

	echo
	echo "Launching Eeschema..."

	# Wait for eeschema to launch the project
	while [[ "$(is_design_loaded "${kicad_sch_filename}")" -ne "1" ]]; do
		sleep ${WAIT_FOR_EESCHEMA_S}
		EESCHEMA_WIDS=($(xdotool search --onlyvisible --sync --classname "Eeschema" 2> /dev/null))
		dismiss_eeschema_popups
	done

	export EESCHEMA_WID=${EESCHEMA_WIDS[0]}
}

close_eeschema()
{
	local win_id=$1
	echo "  Dismissing window"

	xdotool key --window "${win_id}" "Esc" &> /dev/null
	sleep "${TIME}"

	xdotool key --window "${win_id}" "ctrl+q"
	sleep "${TIME}"
}

kill_eeschema()
{
	if ps aux | grep -q "${EESCHEMA_PID}" &> /dev/null; then
		kill -9 "${EESCHEMA_PID}" &> /dev/null
	fi
}

is_design_loaded()
{
	local project_name="${1}"

	IFS=$'\n'
	for win_id in ${EESCHEMA_WIDS}; do

		# xwininfo -tree -id "${win_id}"
		win_title=$(get_window_tile "${win_id}")

		case ${win_title} in
			*${project_name}*)
				echo "1"
				;;
			*)
				echo "0"
				;;
		esac
	done
}

dissmiss_configure_kicad_Settings_path()
{
	local win_id=$1
	echo "  Dismissing Config Kicad Settings"

	xdotool key --window "${win_id}" "Return" &> /dev/null
	sleep "${TIME}"
}

dissmiss_configure_symbol_library_table()
{
	local win_id=$1
	echo "  Dismissing Config Table"

	xdotool key --window "${win_id}" "Return" &> /dev/null
	sleep "${TIME}"
}

dissmiss_popup()
{
	local win_id="${1}"
	local win_title="${2}"
	echo "  Dismissing Popup Window $win_id, title = \"${win_title}\""

	xdotool key --window "${win_id}" "Escape" &> /dev/null
	sleep "${TIME}"
}

dissmiss_save_changes()
{
	# DOES NOT WORK

	local win_id=$1
	echo "  Dismissing Save Changes"

	sleep "${TIME}"

	# discard changes
	xdotool key --window "${win_id}" "Right"
	sleep "${TIME}"

	xdotool key --window "${win_id}" "Right"
	sleep "${TIME}"

	xdotool key --window "${win_id}" "Right"
	sleep "${TIME}"

	xdotool key --window "${win_id}" "Return" &> /dev/null
	sleep "${TIME}"
}

dismiss_eeschema_popups()
{
	IFS=$'\n'

	for win_id in "${EESCHEMA_WIDS[@]}"; do

		win_title=$(xwininfo -tree -id "${win_id}" 2>/dev/null | grep "xwininfo:" | cut -d" " -f5- | sed "s/\"//g")

		echo "- Window ${win_id}, title = \"${win_title}\""

		case "${win_title}" in

			# First time running Kicad
			"Configure KiCad Settings Path")
				dissmiss_configure_kicad_Settings_path "${win_id}" "${win_title}"
				;;

			# First time running Kicad
			"Configure Global Symbol Library Table")
				dissmiss_configure_symbol_library_table "${win_id}" "${win_title}"
				;;

			"[no schematic loaded] — Schematic Editor")
				;;

			"Loading Schematic")
				;;

			"KiCad Schematic Editor Error")
				;;

			"Confirmation")
				;;

			"${project_name} [${project_name}/] — Schematic Editor")
				;;

			"*Project Rescue Helper*"|"Error*"|"Warning*")
				dissmiss_popup "${win_id}" "${win_title}"
				;;

			"]")
				dissmiss_save_changes "${win_id}" "${win_title}"
				;;

			"Save Changes*")
				dissmiss_save_changes "${win_id}" "${win_title}"
				;;

			*)
				# Unknown popup, dismiss anyway
				dissmiss_popup "${win_id}" "${win_title}"
				;;
		esac
	done
}

launch_plot_window()
{
	# Open Menu File > Plot

	local win_id="${1}"

	xdotool key --window "${win_id}" "alt+f"
	sleep "${TIME}"
	xdotool key --window "${win_id}" "Up"
	sleep "${TIME}"
	xdotool key --window "${win_id}" "Up"
	sleep "${TIME}"
	xdotool key --window "${win_id}" "Return"
	sleep "${TIME}"
}

wait_until_plot_finishes()
{
	local plot_dir="${1}"

	case ${kicad_sch_extension} in
		"sch")
			numof_sheets=$(grep -i "^Sheet" ${kicad_sch_path} | cut -d" " -f3)
			;;
		"kicad_sch")
			numof_sheets=$(jq '.sheets | length' ${kicad_prj})
			;;
	esac

	until [[ "$(ls -1 ${plot_dir}/*.svg | wc -l)" -ge ${numof_sheets} ]]; do
		sleep ${TIME}
	done
	sleep ${TIME}
}

plot_schematics()
{
	local win_id="${1}"
	local plot_dir="${2}"

	# Plot window will launch pre-configured
	# When it launches, the focus is the Output Directory field

	# Plot
	xdotool key --window "${win_id}" "Return"
	wait_until_plot_finishes "${plot_dir}"

	# Close the popup
	xdotool key --window "${win_id}" "Escape"
	sleep ${TIME}
}

main()
{
	if ! which xdotool &> /dev/null; then
		echo "xdotool is missing"
		exit 1
	fi

	trap "exit 1" TERM
	trap ctrl_c SIGINT

	# Set keyboard to us
	original_kbd_lang=$(setxkbmap -query | grep layout | tr -s ' ' | cut -d" " -f2)
	setxkbmap -layout us &> /dev/null

	display_server=$(get_current_display_server)
	if [[ "${display_server}" != "x11" ]] && [[ "${display_server}" != "wayland" ]]; then
		echo "Warning: Unknown display server (${display_server})"
		echo "Only X11 and XWayland are currently supported"
		#exit 1
	fi

	local kicad_sch_path="${1}"
	local output_dir_path="${2}"

	if [[ ! -f "${kicad_sch_path}" ]]; then
		echo "Missing .kicad_sch file"
		exit 1
	fi

	local project_name=$(get_filename_without_extension "${kicad_sch_path}")
	local kicad_sch_extension=$(get_file_extension "${kicad_sch_path}")

	case ${kicad_sch_extension} in
		"sch")
			kicad_prj_extension="pro"
			;;
		"kicad_sch")
			kicad_prj_extension="kicad_pro"
			;;
	esac

	local kicad_prj="${project_name}.${kicad_prj_extension}"

	if [[ "${#}" -lt 2 ]]; then
		output_dir_path="."
	else
		output_dir_path="${2}"
		if [[ ! -d "${output_dir_path}" ]]; then
			echo "Error: \"${output_dir_path}\" does not exist"
			exit 1
		fi
	fi

	echo -e "\nDisplay server = $(get_current_display_server)"
	echo -e "Schematic path = ${kicad_sch_path}"
	echo -e "   Output path = ${output_dir_path}"
	echo -e " Kicad project = ${kicad_prj}"

	local temp_dir=$(mktemp -d -p "${output_dir_path}")
	local output_temp_dir_path="${output_dir_path}/${temp_dir}"
	mkdir -p "${output_temp_dir_path}" &> /dev/null

	set_default_plot_settings
	set_plot_output_directory "${kicad_prj}" "${output_temp_dir_path}"

	launch_eeschema "${kicad_sch_path}" #&> /dev/null
	launch_plot_window "${EESCHEMA_WID}" 2> /dev/null
	plot_schematics "${EESCHEMA_WID}" "${output_temp_dir_path}" 2> /dev/null
	close_eeschema "${EESCHEMA_WID}" 2> /dev/null
	kill_eeschema
	echo

	# Organize generated files for KiRI
	svg_file_paths=($(find "${output_temp_dir_path}" -name "*.svg"))

	echo "Kicad exported files:"
	for svg_file in "${svg_file_paths[@]}"; do
		echo "> ${svg_file}"
	done

	mkdir -p "${output_dir_path}/_KIRI_/sch/" &> /dev/null

	echo "Renaming files:"
	if [[ -n ${svg_file_paths} ]]; then
		IFS=$'\n'
		for svg_file in "${svg_file_paths[@]}"; do

			svg_file_name=$(basename "${svg_file%.*}")
			match_line_no=$(cat "${output_dir_path}/_KIRI_/sch_sheets" | grep -m1 -n "|${svg_file_name}$" | cut -d":" -f1)

			if [[ -n "${match_line_no}" ]]; then
				new_svg_file="$(sed -n ${match_line_no}p "${output_dir_path}/_KIRI_/sch_sheets" | cut -f1 -d"|").svg"
				echo "${svg_file} -> ${output_dir_path}/_KIRI_/sch/${new_svg_file}" 2>&1
				cp -f "${svg_file}" "${output_dir_path}/_KIRI_/sch/${new_svg_file}" 2> /dev/null
			fi
		done
	fi

	# Remove temporary folder
	rm -rf "${output_temp_dir_path}"

	# Restore original keyboard layout
	if [[ -n "${original_kbd_lang}" ]]; then
		setxkbmap "${original_kbd_lang}" &> /dev/null
	fi
}

main "${@}"
